generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  
  runtime                = "nodejs"
  moduleFormat           = "esm"
  generatedFileExtension = "ts"
  importFileExtension    = "ts"
}

// only uncomment to generate the ERD in local and then comment again
// generator erd {
//   provider = "prisma-erd-generator"
//   output   = "../docs/erd.svg"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HealthCheck {
  id        Int   @id @default(autoincrement())
  email     String?
  timestamp DateTime @default(now())
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
}


model RealUser {
  id           String             @id @default(uuid())
  name         String
  email        String             @unique
  password     String
  phone        String?
  role         Role               @default(USER)
  reports      Report[]           @relation("UserReports")
  assignments  ReportAssignment[] @relation("WorkerAssignments")
  createdAt    DateTime           @default(now())

  userProfile  UserProfile?       @relation("UserToUserProfile")
  workerProfile WorkerProfile?    @relation("UserToWorkerProfile")
}

model UserProfile {
  id          String   @id @default(uuid())
  userId      String   @unique
  address     String?
  bio         String?
  user        RealUser     @relation("UserToUserProfile", fields: [userId], references: [id])
}

model WorkerProfile {
  id              String   @id @default(uuid())
  workerId        String   @unique
  address         String?
  profilePic      String?
  experience      String?
  certifications  String?
  bio             String?
  user            RealUser     @relation("UserToWorkerProfile", fields: [workerId], references: [id])
}

model Report {
  id          String          @id @default(uuid())
  title       String
  description String
  status      ReportStatus    @default(PENDING)
  location    String?
  latitude    Float?
  longitude   Float?
  image       String?
  userId      String
  user        RealUser            @relation("UserReports", fields: [userId], references: [id])
  assignment  ReportAssignment?
  createdAt   DateTime        @default(now())
}

model ReportAssignment {
  id          String          @id @default(uuid())
  reportId    String          @unique
  workerId    String
  assignedAt  DateTime        @default(now())
  accepted    Boolean         @default(false)
  completedAt DateTime?
  report      Report          @relation(fields: [reportId], references: [id])
  worker      RealUser            @relation("WorkerAssignments", fields: [workerId], references: [id])
}

enum Role {
  USER
  ADMIN
  WORKER
}

enum ReportStatus {
  PENDING
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  REJECTED
}

